# Copyright (C) 2017 Sergej Schumilo
# 
# This file is part of KVM-PT (kAFL).
# 
# QEMU-PT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# QEMU-PT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with QEMU-PT.  If not, see <http://www.gnu.org/licenses/>.
54a55,59
> #ifdef CONFIG_KVM_VMX_PT
> #include "vmx_pt.h"
> static int handle_monitor_trap(struct kvm_vcpu *vcpu);
> #endif
> 
521a527,529
> #ifdef CONFIG_KVM_VMX_PT
> 	struct vcpu_vmx_pt*   vmx_pt_config;
> #endif
1608a1617,1619
> #ifdef CONFIG_KVM_VMX_PT
> 	vmx->vm_entry_controls_shadow = val | 0x20000ULL;	/* Conceal VM entries from Intel PT */
> #else
1609a1621
> #endif
1636a1649,1651
> #ifdef CONFIG_KVM_VMX_PT
> 	vmx->vm_exit_controls_shadow = val | 0x1000000ULL;	/* Conceal VM exit from Intel PT */
> #else
1637a1653
> #endif
1801c1817
< static void add_atomic_switch_msr(struct vcpu_vmx *vmx, unsigned msr,
---
> void add_atomic_switch_msr(struct vcpu_vmx *vmx, unsigned msr,
3346c3362
< 	vmcs_conf->cpu_based_exec_ctrl = _cpu_based_exec_control;
---
> 	vmcs_conf->cpu_based_exec_ctrl = _cpu_based_exec_control | 0x80000;
3348,3349c3364,3365
< 	vmcs_conf->vmexit_ctrl         = _vmexit_control;
< 	vmcs_conf->vmentry_ctrl        = _vmentry_control;
---
> 	vmcs_conf->vmexit_ctrl         = _vmexit_control | 0x1000000;
> 	vmcs_conf->vmentry_ctrl        = _vmentry_control | 0x20000;
4809a4826
> 				
5445d5461
< 
8245a8262
> 
8618a8636,8639
> #ifdef CONFIG_KVM_VMX_PT
> 	vmx_pt_vmentry(vmx->vmx_pt_config);
> #endif
> 
8825a8847,8850
> 	
> 	#ifdef CONFIG_KVM_VMX_PT
> 		vmx_pt_vmexit(vmx->vmx_pt_config);
> 	#endif
8855a8881,8885
> 	
> #ifdef CONFIG_KVM_VMX_PT
> 	/* free vmx_pt */
> 	vmx_pt_destroy(vmx, &(vmx->vmx_pt_config));
> #endif
8937a8968,8972
> #ifdef CONFIG_KVM_VMX_PT
> 	/* enable vmx_pt */
> 	vmx_pt_setup(vmx, &(vmx->vmx_pt_config));
> #endif
> 
10891a10927,10936
> #ifdef CONFIG_KVM_VMX_PT
> static int vmx_pt_setup_fd(struct kvm_vcpu *vcpu){
> 	return vmx_pt_create_fd(to_vmx(vcpu)->vmx_pt_config);
> }
> 
> static int vmx_pt_is_enabled(void){
> 	return vmx_pt_enabled();
> }
> #endif	
> 
11015a11061,11065
> 	
> #ifdef CONFIG_KVM_VMX_PT
> 	.setup_trace_fd = vmx_pt_setup_fd,
> 	.vmx_pt_enabled = vmx_pt_is_enabled,
> #endif	
11029a11080,11082
> #ifdef CONFIG_KVM_VMX_PT
> 	vmx_pt_init();
> #endif
11039c11092,11094
< 
---
> #ifdef CONFIG_KVM_VMX_PT
> 	vmx_pt_exit();
> #endif
