# Copyright (C) 2017 Sergej Schumilo
# 
# This file is part of QEMU-PT (kAFL).
# 
# QEMU-PT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# QEMU-PT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with QEMU-PT.  If not, see <http://www.gnu.org/licenses/>.
42a64,69
> #ifdef CONFIG_PROCESSOR_TRACE
> #include "pt.h"
> #include "pt/hypercall.h"
> #endif
> 
> 
321a349,353
> #ifdef CONFIG_PROCESSOR_TRACE
>     pt_kvm_init(cpu);
> #endif
> 
> 
1970a2003,2014
> #ifdef CONFIG_PROCESSOR_TRACE
>         if(cpu->reload_pending){
>             cpu->reload_pending = false;
>             //cpu_synchronize_state(cpu);
>             kvm_cpu_synchronize_state(cpu);
>             qemu_system_reload_request();
>             qemu_mutex_lock_iothread();
>             return 0;
>         }
> #endif 
> 
> 
1986a2031,2037
> #ifdef CONFIG_PROCESSOR_TRACE
>         //if(pt_hypercalls_enabled()){
>             pt_pre_kvm_run(cpu);
>         //}
> #endif
> 
> 
2065a2117,2167
> #ifdef CONFIG_PROCESSOR_TRACE
>         case KVM_EXIT_KAFL_ACQUIRE:
>             handle_hypercall_kafl_acquire(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_GET_PAYLOAD:
>             handle_hypercall_get_payload(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_GET_PROGRAM:
>             handle_hypercall_get_program(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_RELEASE:
>             handle_hypercall_kafl_release(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_SUBMIT_CR3:
>             handle_hypercall_kafl_cr3(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_SUBMIT_PANIC:
>             handle_hypercall_kafl_submit_panic(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_SUBMIT_KASAN:
>             handle_hypercall_kafl_submit_kasan(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_PANIC:
>             handle_hypercall_kafl_panic(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_KASAN:
>             handle_hypercall_kafl_kasan(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_LOCK:
>             handle_hypercall_kafl_lock(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_INFO:
>             handle_hypercall_kafl_info(run, cpu);
>             ret = 0;
>             break;
>         case KVM_EXIT_KAFL_NEXT_PAYLOAD:                                                                                                                                     
>             handle_hypercall_kafl_next_payload(run, cpu);                                                                                                                    
>             ret = 0;                                                                                                                                                         
>             break;                                                                                                                                                                                                                                                                                                              
> #endif     
> 
2093a2196,2200
> #ifdef CONFIG_PROCESSOR_TRACE                                                                                                                                                
>         //if(pt_hypercalls_enabled()){                                                                                                                                         
>             pt_post_kvm_run(cpu);                                                                                                                                            
>         //}                                                                                                                                                                    
> #endif    
